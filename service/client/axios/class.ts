import axios, { AxiosInstance, AxiosResponse } from 'axios';
import baseClient, {
  typeOfGetInput,
} from '../baseClient';

// This class implements the baseClient methods using Axios
class AxiosClient implements baseClient {
  private baseUrl: string;
  private axios: AxiosInstance;

  constructor(baseUrl: string) {
    this.baseUrl = baseUrl;
    this.axios = axios.create({ baseURL: this.baseUrl });
  }

  // Handle axios errors
  private errorHandler(error: any) {
    if (error?.response?.data) return error.response?.data; // Catch errors generated by bad response code status
    return { error: 'Unable to complete the request' }; // Catch unknown error
  }

  async get({
    endpoint,
    headers,
    queryParams,
  }: typeOfGetInput): Promise<Record<string, any>> {
    try {
      const url = endpoint;

      // Request data
      const { data }: AxiosResponse = await this.axios({
        url,
        headers,
        params: queryParams,
      });
      return data;
    } catch (error) {
      return this.errorHandler(error);
    }
  }
}

export default AxiosClient;
